# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)
post0 = Post.create!(title: "The Last Night", name: "Ben", content: "The last stretch until presentations! We just found out that the slack webhook integration we’ve coded is now being merged into the Loomio master! Our stretch goal has been achieved. The rails blog is now coming along nicely, and taking note of the journey feels rewarding. I hope future DBCer’s and newcomers will see this blog and be inspired to contribute to open-source. It was quite daunting traversing through the production-level codebase jungle, but I feel like we’ve come out with such a better understanding of what we actually have to do at a job. I’ve also come to really appreciate the Model, View, Controller pattern and keeping code and folder structure modular. I can see how nightmarish it would be if code was not DRY and easily reusable.", date: "October 15, 2015")


post1 = Post.create!(title: "Telling our story - Creating the blog", name: "Amrita & Tracey", content: "We wanted to build a simple rails blog app to record our team’s experience of working with legacy Loomio code and making changes that we thought of as well as changes requested by Loomio. The team spent most of the time on two tasks: 1) creating a customized version of Loomio for DBC so that DBC can track its decision-making process, its diversity, and the overlap, and 2) working on the actual Loomio code base by completing requested tasks that Loomio development had submitted in Github tasks. To create the blog quickly, we decided to use a Bootstrap template.", date: "October 15, 2015")

post2 = Post.create!(title: "Key to the Secret_keys", name: "Amrita", content: "I started out the day thinking I’d push our version of DBCLoomio up to heroku real quick,and probably get done in time for lunch to start working on a new feature in the afternoon. Low and behold I rabbit holed on a bug and spent the entire day trying to get heroku to even connect with the local version of our app. I kept getting the error “Devise Secret Key not set”. I spent half the day finding where the Cracken (aka our codebase) was assigning the secret key and tried to hardcode in the secret_key that the error message was giving me. This proved unfruitful. After spending hours trying to hardcode in the secret key in the environment, on config files, and on the secrets.yml file I finally reached out for help. The error was that heroku didn’t recognize the secret_key that was coming in from our app. Devise was generating a new secret key every time the connection between my local application and the heroku app failed, which is why I couldn’t find where the secret_key was being generated in my codebase- devise/heroku magic! Once I added the secret_key as a config value in the heroku application manually, I was able to reach the next error. The d3.min.js library wasn’t being accessed in the require files. I thought this was because we didn’t add in the library anywhere, but under the application/javascript/lib files it was definitely already there! What I soon realized was that we had created a new version of the application.js files called print.js that was trying to access the d3 library from the wrong path. Instead of pointing to lib/d3.min it was looking for the d3 library in the same directory. After making the changes and even simplifying the name from d3.min.js to d3.js I realized I was still getting an error calling on d3.min.js- even though I had changed the file name. Ultimately, I realized that I had been pushing my master branch up to heroku when I was working on a herokuPush development branch. After resolving all of these issues I had a timeout error where heroku was not able to load the entire codebase within 60 seconds. At this point after seeking guidance, our group came to consensus that the local version of our app would suffice for this project, and to document the learnings of deploying to heroku. Overall this experience was a bit frustrating, but at the same time it was awesome to learn so much about how heroku interacts with rails apps using devise.", date: "October 14, 2015" )

post3 = Post.create!(name: "Ben", title: "Adding Data Visualization", content: "It took us a while to figure out how to transfer data from Rails backend as JSON so D3 can use it. We actually created a user_data controller action in pages which renders a json object. TO create the needed object we first hardcoded what we needed like number of Asian Males. I later refactored it to iterate through the users array to pick out the attributes I want. That made it a lot cleaner. I also took out the javascript file from the haml file to put them in separate areas. Then Each time the JS IIFFE is run, we put an ajax call to hit user_data d3 can now use the objects in the javascript realm. The motions pie chart actually included inline javascript with the haml. I think the loomio community chose to do that since there is only one data visualization in the whole website, so keeping it in a haml file makes sense (since d3 is basically just rendering something to that page). I tried a different way and separated the JS file. In the HAML file I just included the javascript_tag. I first tried putting it in assets but the javascript file I included was rendering on every page load. I feel like there must be a way to just render a certain js file to a certain haml file other than javascript_tag but what I have feels good enough. I spent a little too long getting rabbit holed on using waypoints for my motions pie chart. I found a way for the chart to render when it is in the client’s view while scrolling, but…", date: "October 13, 2015")

post4 = Post.create!(name: "Julia" , title: "Our Demise by Devise....Almost", content: "In the process of figuring out these permissions, we had to research and get a basic understanding of slugs (Semantic URLs), friendly_id (known as the “Swiss Army bulldozer” of slugging), Cancancan, and more advanced aspects of using Devise in rails for authentication. Also, we made a note to read later the Rails guides section, “How to construct your own routes, using either the preferred resourceful style or the match method.” •Began with being blocked by permissions issues with notes -> “Error: permission denied, redirected to dashboard.” •Problems: oNotes not associated properly with user or group b/c foreign key missing. Modified routes to nest notes in routes. Changed URL for new_note_path in view to take a group id as an argument rather than @note. notes/new => notes/new?group=1 Made mistake in route, named the notes path ‘/n/’, and that was already being used for networks. Spent an hour debugging that. Learned about friendly id and slugs as we were debugging network controller. At DB level, there were no foreign keys on the notes table, so rolled back migration and added those. Then opened rails console and made sure I could add a note to the DB. Had to debug and went with user_id foreign key, which was more straightfoward than author_id. At controller level, disconnect. Put in debugging info, printing asterisks and stuff. Knew it wasn’t hitting the route. Looked at what was happening in terminal, HTTP 302, redirect right after it hit the notes controller. Params were right though, had the correct group id and user id. Started searching for anything to do with permissions in the code. Found events folder under models that had a file for each thing like new_motion, new_discussion, so I added one for votes and copied what looked like relevant code. Came across model called ParamsPermissions, found lists of specific permitted params for each resource. There was an array of each resource that was being iterated over, not sure what exactly it was doing, something to do with authorizing permissions, so added “notes”… Also had methods specifying permitted attributes for each thing, so created “note_attributes” with the attributes we had for notes. Wandered away from computer in despair. Went to bathroom. Had bite of cheese toast. Thought about how I’d google the shit out of this problem and how great it would be to get to the point where we could just edit the view files and get our notes working. Considered that it was actually lucky we got a ‘permission denied’ error, at least we know exactly what’s going on, if not where to find the problem. Keep repeating that this is just rails, with a bunch of methods and permissions someone else wrote. Just keep backtracing every unfamiliar thing until we find the source of the problem… Googled permissions, found that load_and_authorize_permissions is shorthand for a way of authorizing resources using CanCan or something like that. Realized that’s at the top of our notes controller, tried commenting it out and IT WORKED!!!!! Now have to research authorize_permissions and tweak it to work correctly. Other resources pass exceptions to the authorize_permissions method for certain pages, like :show and :create, so we should probably have done that as well. Lesson learned.", date: "October 12, 2015")

post5 = Post.create!(name: "Tracey", title: "Adding Notes Feature", content:  "One of our goal for MVP was to create a blog for each discussion topic that would serve as a sort of “meeting minutes” that tracked the process of a group coming to a decision on a discussion topic. I took on the task of creating this notes class and integrating it into the existing Loomio codebase. Loomio already has a comments function, but these tend to be very short additions to a discussion to clarify points or ask/answer questions. We decided to add a Notes function to summarize the entire process of coming to a decision. To create the Notes functionality, I created the controller, model and migration and views: •notes_controller.rb •note.rb (model) •20151010020842_create_notes (migration) • views/notes/_notes.html.haml •views/notes/index.html.haml • views/notes/new.html.haml •views/notes/show.html.haml • config/routes.rb → added notes to resources (Julia nested it under groups) oresources :notes , only: [:create, :new, :destroy, :edit, :update, :show] do I realized that it was not hitting any of my routes because we were blocked by some issues with permissions. Rather than going to the appropriate view page for each route, it was rerouting back to the dashboard and displaying a message - “You do not have permission to do that.” I began looking up how to deal with permissions when adding a new model, migration, etc. I needed to learn how to use the permissions that were already set up in legacy code with devise. Julia figured out permissions on day 4. Also, we had to alter the way I had added notes into the config/routes.rb file by nesting it under groups as well as listing “notes” as a separate resource. Once we got past this devise/permissions issue, we at least got the errors we were expecting so that we could finish building the view pages. Correct routes being hit! Good job, Julia!!" , date: "October 12, 2015")

post6 = Post.create!(name: "Amrita", title: "The Loch Ness", content: "Today was the first day that I felt like I was really contributing to our project. Up until now I’ve been investing time learning d3.js and trying to understand our codebase. Since the codebase is humongous and written in coffeescript, haml, angular and rails, I’ve just been really intimidated and overwhelmed by it. Our team lead (Julia) has been expressing her epiphany that “it’s just a bloated rails app” since yesterday, but it wasn’t until I set up a custom route and corresponding view page that I realized, wow, this really is just a rails app. I’m riding that feeling of accomplishment and continuing to make incremental changes. It’s a little bit disappointing to know how excited I am over such small developments and daunting to know how much we have left to do, but I think we’ve been doing a good job of keeping our goals flexible and tangible. I’m definitely proud of us for embarking on a path not taken. We spoke to both of our instructors who applauded our efforts and encouraged us to embrace the confusion. I didn’t feel satisfied with their approval and looked to my mentor for further validation as to whether or not this was a good choice for our final project. Since we weren’t following the traditional path of building a flashy CRUD app to put in our portfolio and show off to future potential employers, I was really unsure about the risk of this choice. My mentor assured me that at the end of the day employers aren’t looking for a basic CRUD app as much as they’re looking for developers who are genuinely curious and excited. He said if this is something that I’m curious, excited, and maybe even scared of a little bit then to go for it. this is where I should be and will maximize my learning experience. His words brought me the guidance I needed to feel confident moving forward...kinda", date: "October 11, 2015")

post7 = Post.create!(name: "Julia", title: "Setting Our Goals", content: "Today was a rollercoaster. Midway through the first day of final projects, our group decided to dive into an open source codebase and try to make a contribution rather than build our own app. Nruthya originally suggested the idea of a group decision-making app. We had picked Loomio as a project we were excited about at Utsab’s open source meetup a few weeks before, since we were excited about playing with data visualizations. /n This morning I pitched the idea of an app, “Decide-It”, to help with visualizing group decision making, and our cohort ended up voting for the idea. I found myself as team lead on an ambiguously defined project, with Nruthya assigned to a different team. Our team spent the morning brainstorming and coming up with user stories. We started to realize that what we wanted to build had already been done, and others had built it better than we could attempt. At one point, I tossed out an idea: “This is kind of crazy, but I’m thinking what we’re describing is exactly what Loomio is, and I’ve already forked their repo… what if we just built our feature directly on their app and tried to make a contribution to their code?” To my surprise, everyone else seemed to like the idea. Suddenly, we were going down an entirely different path. We asked for advice from our instructors and started thinking about centering our final project around an existing, open source codebase. We redefined our goals and started a blog. By the end of this week, if we haven’t been able to make a successful contribution to Loomio, at least we’ll be able to present some data visualizations and a blog about our learning process. We’re looking forward to the next week with excitement and trepidation. What if we can’t figure out how to do anything with Loomio’s code? What if D3 and their Angular front end clash horribly? What if our final contribution is a tangled mess? All of these fears are circling. But it totally doesn’t matter. No matter what, we’ll be learning a lot and getting involved in a cool project we can definitely contribute to in the future. Nobody’s done this before as a final project at Dev Bootcamp. We asked Jordan if we’d be missing out by not building a CRUD app. He basically asked us what we were most afraid of, and to do the thing that scares us. This definitely scares us, but it’s a realistic challenge. Nobody’s going to be begging us, as junior developers, to set up their basic app. As soon as we get a job we’ll probably be diving into legacy code, so we might as well start now. Over the next week we’ll have to balance learning new technologies with learning about Loomio, and figure out how we can integrate the two. Our team is venturing into uncharted territory, but we’ve embraced curiosity, exploration, and a spirit of mutual support.", date: "October 8, 2015")